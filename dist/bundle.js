/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/App.js":
/*!*******************!*\
  !*** ./js/App.js ***!
  \*******************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DataCollection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DataCollection */ \"./js/DataCollection.js\");\n/**\n * App class by Johnpaul McMahon\n *\n * There should only be 1 instance of this class.\n * It will receive a store object from instantiator\n * and will control the displaying and updating of all\n * data.\n */\n\n\nclass App {\n   /**\n    *\n    * @param {Object} store\n    */\n   constructor(store) {\n      // Shared store. Only give what is required to other components (Flux-like architecture)\n      this.store = store;\n      // Sub-project number\n      this.store.subProject = \"\";\n      // Description for each row - always the same\n      this.store.description = \"\";\n      // List of periods\n      this.store.periods = new Set();\n      // List of DataCollection's. Each collection holds a list of Resbuds\n      this.store.collections = [];\n      // FEC Income vs PRICE budget check\n      this.awardAmountCheck;\n   }\n\n   /**\n    * Initialise App and setup Collections of Resbuds\n    *\n    * @param {Array} input\n    */\n   init(input) {\n      this.setSubProject(\"\");\n      this.setDescription(input[0][this.store.constants.DESCRIPTION]);\n      this.setPeriods(input);\n      this.initialiseCollections(input);\n   }\n\n   /**\n    * Initialise Collections of Resbud objects\n    *\n    * @param {Array} input - List of objects\n    */\n   initialiseCollections(input) {\n      // DataCollection temp\n      let collection;\n      // PBFEC, PBPRICE\n      let collections = new Set();\n\n      // Get list of DataCollections to be created by parsing input for unique values in the TYPE column\n      input.forEach(record =>\n         collections.add(record[this.store.constants.TYPE])\n      );\n\n      collections.forEach(name => {\n         collection = new _DataCollection__WEBPACK_IMPORTED_MODULE_0__[\"default\"](name, {\n            ...this.store,\n            subProject: () => this.getSubProject(),\n            description: () => this.getDescription(),\n            periods: [...this.store.periods]\n         });\n         collection.init(\n            input.filter(\n               record =>\n                  record[this.store.constants.TYPE] === collection.getType()\n            )\n         );\n         this.store.collections.push(collection);\n      });\n   }\n\n   /**\n    * Set the Sub Project\n    *\n    * @param {String} sp\n    */\n   setSubProject(sp) {\n      this.store.subProject = sp;\n   }\n\n   /**\n    * Returns the sub-project. Passed to Collections so they\n    * can retrieve updated subproject.\n    */\n   getSubProject() {\n      return this.store.subProject;\n   }\n\n   /**\n    * Set the Description\n    *\n    * @param {String} desc\n    */\n   setDescription(desc) {\n      this.store.description = desc;\n   }\n\n   getDescription() {\n      return this.store.description;\n   }\n\n   /**\n    * Set the Periods\n    *\n    * @param {Array} input - Array of data to be scanned for unique period values\n    */\n   setPeriods(input) {\n      // Loop over all input records and add the period values to the Set.\n      // Using a set as they automatically strip out duplicate values.\n      input.forEach(record =>\n         this.store.periods.add(record[this.store.constants.PERIOD])\n      );\n      // convert to array\n      this.store.periods = [...this.store.periods].sort();\n   }\n\n   /**\n    * Returns array of DataCollection objects\n    */\n   getCollections() {\n      return this.store.collections;\n   }\n\n   /**\n    * Use the size of the period list Set to get duration in months.\n    * Will be correct if at least one of the existing Resbuds contains\n    * amounts in all periods of the project.\n    */\n   getMonthlyDuration() {\n      return this.store.periods.length;\n   }\n\n   isAwardOk() {\n      return this.awardAmountCheck > -1 && this.awardAmountCheck < 1;\n   }\n\n   /**\n    * Kick starts the process of calculating the amendment results\n    * Also downloads the results in .csv format\n    */\n   calculateResults() {\n      if (!this.getSubProject() || !this.getDescription()) {\n         Swal.fire(\n            \"Oops...\",\n            \"Please check you have entered a Sub Project and Description.\",\n            \"error\"\n         );\n         return;\n      }\n      // Reset\n      this.awardAmountCheck = 0;\n\n      // Call upon each Collection to calculate amendment results\n      // and then add the award amount for each Collection onto\n      // the Apps overall award amount check.\n      this.getCollections().forEach(collection => {\n         collection.calculateResults();\n         this.awardAmountCheck += collection.newAwardAmount;\n      });\n\n      // If award control check is ok, download results and return.\n      if (this.isAwardOk()) {\n         this.downloadAndInformUser();\n         // this.buildResultsReport().scrollIntoView();\n         return;\n      }\n\n      // If above check never returned then warn user of award discrepancy.\n      this.warnUser();\n   }\n\n   // Show User success modal and download results.\n   downloadAndInformUser() {\n      if (this.exportResults()) {\n         Swal.fire(\n            \"Downloading...\",\n            \"Your results will be in your Downloads folder.\",\n            \"success\"\n         );\n      }\n   }\n\n   // Called when Income and Price budgets don't match.\n   // Informs User that there is a problem they need to sort.\n   warnUser() {\n      Swal.fire({\n         title: \"Check your Income and Price Totals\",\n         text:\n            \"This message appears when the Income budget and Price budget totals don't match\",\n         type: \"warning\",\n         showCancelButton: true,\n         confirmButtonColor: \"#43a047\",\n         cancelButtonColor: \"#d33\",\n         confirmButtonText: \"They are fine!\",\n         cancelButtonText: \"Cancel so I can check!\"\n      }).then(result => {\n         if (result.value) {\n            this.downloadAndInformUser();\n         }\n      });\n   }\n\n   /**\n    * Creates and injects Summary Report Element to DOM.\n    * This is where users input new budget amounts.\n    */\n   buildSummaryReport() {\n      // Get Parent element\n      let reportContainer = document.getElementById(\n         this.store.htmlHooks.REPORT\n      );\n\n      // Re-used box element (gets re-assigned multiple times)\n      let box = this.store.utils.createElement(\"div\", {\n         className: \"box\"\n      });\n\n      // Add box to container\n      reportContainer.appendChild(box);\n\n      // Add info notification\n      box.appendChild(\n         this.store.utils.createElement(\"div\", {\n            innerHTML:\n               \"Please check the below details. If anything is incorrect then see Johnpaul before proceeding.\",\n            className: \"notification is-info has-text-centered\"\n         })\n      );\n\n      // Add field to display sub-project\n      box.appendChild(this.buildSubProjectField());\n\n      // Add field to display description\n      box.appendChild(this.buildDescriptionField());\n\n      // Add field to display duration\n      box.appendChild(this.buildDurationField());\n\n      // Add field to display first period\n      box.appendChild(this.buildFirstPeriodField());\n\n      // Create a box for each Collection and append the result of\n      // calling eaching Collection's buildSummaryReport method.\n      this.store.collections.forEach(collection => {\n         box = this.store.utils.createElement(\"div\", {\n            className: \"box\"\n         });\n         box.appendChild(collection.buildSummaryReport());\n         reportContainer.appendChild(box);\n      });\n\n      // New box for Fetch and Restart buttons\n      box = this.store.utils.createElement(\"div\", {\n         className: \"box\"\n      });\n\n      // Add button with event for calculating results\n      box.appendChild(this.buildCalculateButton());\n\n      // Add page refresh button\n      box.appendChild(this.buildReloadButton());\n\n      // Add fetch results box to container\n      reportContainer.appendChild(box);\n   }\n\n   /**\n    * NOT IN USE\n    * Outputs another box with a table showing the results\n    */\n   buildResultsReport() {\n      // Get handle to results DOM node\n      let container = document.getElementById(this.store.htmlHooks.OUTPUT);\n\n      // Box container\n      let box = this.store.utils.createElement(\"div\", {\n         className: \"box\"\n      });\n\n      // Clear all elements from container (start fresh)\n      this.store.utils.removeAllChildren(container);\n\n      // Add export button\n      box.appendChild(\n         this.store.utils.createElement(\"button\", {\n            innerHTML: \"Export Results\",\n            className: \"button is-info is-outlined\",\n            onclick: () => this.exportResults()\n         })\n      );\n\n      // Build out results for each Collection\n      this.getCollections().forEach(collection =>\n         box.appendChild(collection.buildResultsReport())\n      );\n\n      container.appendChild(box);\n\n      return container;\n   }\n\n   /**\n    * Returns DOM Element containing sub-project number\n    *\n    * @return {Element}\n    */\n   buildSubProjectField() {\n      return this.buildFormElement(\n         \"Sub Project\", // Label text\n         e => this.handleSubProjectChange(e),\n         {\n            type: \"text\", // Input type\n            value: this.store.subProject // Input value\n         }\n      );\n   }\n\n   /**\n    * Returns DOM Element containing description to be used when posting to planner\n    *\n    * @return {Element}\n    */\n   buildDescriptionField() {\n      return this.buildFormElement(\n         \"Description\", // Label text\n         e => this.handleDescriptionChange(e),\n         {\n            type: \"text\", // Input type\n            value: this.store.description // Input value\n         }\n      );\n   }\n\n   /**\n    * Returns DOM Element containing duration in months\n    *\n    * @return {Element}\n    */\n   buildDurationField() {\n      return this.buildFormElement(\n         \"Duration\", // Label text\n         () => this.handleDurationChange(), // onchange handler\n         {\n            type: \"number\", // Input type\n            value: this.getMonthlyDuration(), // Input value\n            disabled: \"disabled\"\n         }\n      );\n   }\n\n   /**\n    * Returns DOM Element containing the first period\n    *\n    * @return {Element}\n    */\n   buildFirstPeriodField() {\n      return this.buildFormElement(\n         \"First Period\", // Label text\n         () => this.handleFirstPeriodChange(), // onchange handler\n         {\n            type: \"number\", // Input type\n            value: [...this.store.periods][0], // Input value\n            disabled: \"disabled\"\n         }\n      );\n   }\n\n   buildFormElement(labelText, handler, inputOptions) {\n      // Container element\n      let container = this.store.utils.createElement(\"div\", {\n         className: \"field is-horizontal\"\n      });\n      // Label element\n      let label = this.buildLabel(labelText); // VARIABLE\n      // Input container element\n      let inputContainer = this.buildInputContainer();\n      // Input element (need this to attached event handler)\n      let input = this.buildInput(inputOptions);\n      // Add input element to the input container\n      inputContainer.appendChild(input);\n      // Attach event handler to input element\n      if (handler !== null) input.onkeyup = handler;\n      //Attach the label and input container elements\n      container.appendChild(label);\n      container.appendChild(inputContainer);\n      return container;\n   }\n\n   buildLabel(labelText) {\n      return this.store.utils.createElement(\"div\", {\n         className: \"field-label is-normal\",\n         innerHTML: `<label class=\"label\">${labelText}</label>`\n      });\n   }\n\n   buildInput(options = {}) {\n      let input = this.store.utils.createElement(\"input\", {\n         className: \"input\"\n      });\n      Object.keys(options).forEach(key => {\n         if (key === \"className\") input.className += ` ${options.className}`;\n         else input[key] = options[key];\n      });\n      return input;\n   }\n\n   buildInputContainer() {\n      let container = this.store.utils.createElement(\"div\", {\n         className: \"field-body\"\n      });\n      container.appendChild(\n         this.store.utils.createElement(\"div\", {\n            className: \"field\"\n         })\n      );\n      container.appendChild(\n         this.store.utils.createElement(\"div\", {\n            className: \"control\"\n         })\n      );\n      return container;\n   }\n\n   handleSubProjectChange(e) {\n      this.setSubProject(e.target.value);\n   }\n\n   handleDescriptionChange(e) {\n      this.setDescription(e.target.value);\n   }\n\n   handleDurationChange() {\n      console.log(this.getMonthlyDuration());\n   }\n\n   handleFirstPeriodChange() {\n      console.log([...this.store.periods][0]);\n   }\n\n   buildReloadButton() {\n      let button = this.store.utils.createElement(\"button\", {\n         innerHTML: \"Restart\",\n         className: \"button is-danger is-outlined\"\n      });\n      button.onclick = e => location.reload();\n      return button;\n   }\n\n   buildCalculateButton() {\n      // Add button with event for calculating results\n      let button = this.store.utils.createElement(\"button\", {\n         innerHTML: \"Fetch Results\",\n         id: \"get-results-button\",\n         className: \"button is-info\",\n         style: \"margin-right: 8px\"\n      });\n      button.onclick = () => this.calculateResults();\n      return button;\n   }\n\n   exportResults() {\n      let csvString = \"data:text/csv;charset=utf-8,\";\n      let exportData = [];\n      exportData.push(\n         [\n            this.store.constants.TYPE,\n            this.store.constants.RESBUD,\n            this.store.constants.RESBUD + \" (T)\",\n            this.store.constants.SUB_PROJECT,\n            this.store.constants.GBP_AMOUNT,\n            this.store.constants.PERIOD,\n            this.store.constants.DESCRIPTION\n         ].join(\",\")\n      );\n\n      this.getCollections().forEach(collection => {\n         collection.exportData().forEach(resbudData => {\n            resbudData.forEach(row => exportData.push(row.join(\",\")));\n         });\n      });\n\n      // Build up csv data and make browser download it as a file\n      // But only if there is data to export (exportData will be at least 1 in length due to heading).\n      if (exportData.length > 1) {\n         exportData.forEach(row => (csvString += `${row}\\r\\n`));\n         let link = this.store.utils.createElement(\"a\", {\n            href: encodeURI(csvString),\n            download: `${this.store.subProject}_export.csv`,\n            innerHTML: \"Download\",\n            style: \"display: none\"\n         });\n         document.body.appendChild(link);\n         link.click();\n         return true;\n      }\n      Swal.fire(\"No Changes\", \"Nothing appears to have changed...\", \"warning\");\n      return false;\n   }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (App);\n\n\n//# sourceURL=webpack:///./js/App.js?");

/***/ }),

/***/ "./js/DataCollection.js":
/*!******************************!*\
  !*** ./js/DataCollection.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Resbud__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Resbud */ \"./js/Resbud.js\");\n/**\n * DataCollection class by Johnpaul McMahon\n *\n * This class represents a type (FEC, PRICE etc).\n * Each instance will contain and manage a list of\n * budgets (Resbud instances).\n */\n\n\nclass DataCollection {\n   /**\n    * Constructor\n    *\n    * @param {String} name - type of collection (PBFEC, PBPRICE, IBFEC or IBPRICE)\n    * @param {Object} store - useful data, constants and utils\n    */\n   constructor(name, store) {\n      this.store = store;\n      this.name = name;\n      this.data = [];\n      this.newAwardAmount = 0; // This gets set in saveAmendmentToAwardedAmount (when calculating results)\n      this.reportTableElement; // Save DOM Element for displaying Resbuds\n      this.newBudgetListElement; // Save <select> DOM Element to update the list easier\n      this.newBudgetTotalElement; // Save this so that content can be updated on user inputting new budget\n      this.amendmentTotalElement; // Save this so that content can be updated on user inputting new budget\n   }\n\n   /**\n    * Extract relevant data from source array\n    *\n    * @param {Array} source - list of objects containing record data\n    */\n   init(source) {\n      // Local var used in loop\n      let resbud;\n      // Loop over every record within input\n      source.forEach(record => {\n         // Empty array or array with exactly 1 Resbud object in it:\n         resbud = this.getResbuds().filter(\n            resbud => resbud.getCode() === record[this.store.constants.RESBUD]\n         );\n         if (resbud.length === 1) {\n            // If there is 1 entry then extract it\n            resbud = resbud[0];\n         } else if (resbud.length === 0) {\n            // No entries means new Resbud encountered. Instantiate and push to collection\n            resbud = record[this.store.constants.RESBUD];\n            // Must perform this step separately as we need to use the new Resbud at end of this method\n            resbud = this.newResbud(resbud);\n            this.addResbud(resbud);\n         } else {\n            // If there is more than 1 entry then we have a bug to fix\n            throw \"More than 1 Resbud object for \" +\n               record[this.store.constants.RESBUD] +\n               \" in Collection \" +\n               this.name +\n               \".<br/>Duplicates should not be possible - See JPM.\";\n         }\n         // Push old budget amount onto Resbud\n         resbud.pushToOldBudget(\n            record[this.store.constants.GBP_AMOUNT],\n            record[this.store.constants.PERIOD]\n         );\n      });\n   }\n\n   addResbud(resbud) {\n      this.data.push(resbud);\n   }\n\n   getResbuds() {\n      return this.data;\n   }\n\n   // Returns a FEC or PRICE type (PBFEC, PBPRICE etc..)\n   getType() {\n      return this.name;\n   }\n\n   // Is this collection a FEC type?\n   isOfTypeFec() {\n      return this.store.constants.FEC_BUDGET_TYPES.includes(this.getType());\n   }\n\n   // Is this a collection a PRICE type?\n   isOfTypePrice() {\n      return this.store.constants.PRICE_BUDGET_TYPES.includes(this.getType());\n   }\n\n   /**\n    * Calculate result data\n    */\n   calculateResults() {\n      // Refresh so script can be re-used\n      this.newAwardAmount = 0;\n\n      this.getResbuds().forEach(resbud => {\n         resbud.calculateResults();\n         this.updateNewAwardAmount(resbud);\n      });\n   }\n\n   // This was introduced on 23/05/2019 to allow for an Income vs Price\n   // control check.\n   updateNewAwardAmount(resbud) {\n      // If this is FEC type and resbud is Income then record amendment\n      if (this.isOfTypeFec() && resbud.getCode() == \"XZ90\") {\n         // Old fec income amount + amendment = target income amount\n         this.newAwardAmount =\n            resbud.getOldBudget() + resbud.getAmendmentTotal();\n      } else if (this.isOfTypePrice()) {\n         // Old price budget + all price amendments = target price budget\n         this.newAwardAmount +=\n            resbud.getOldBudget() + resbud.getAmendmentTotal();\n      }\n   }\n\n   /**\n    * Creates and returns a new Resbud instance\n    *\n    * @param {String} resbud - Resbud Code\n    */\n   newResbud(resbud) {\n      return new _Resbud__WEBPACK_IMPORTED_MODULE_0__[\"default\"](resbud, this.store.resbudMap[resbud], this.store);\n   }\n\n   /**\n    * Builds the summary report that lets Users input new budget amounts.\n    */\n   buildSummaryReport() {\n      // Build the container that will eventually be returned\n      let container = this.store.utils.createElement(\"div\", {\n         id: this.name.toLowerCase() + \"-report-container\"\n      });\n\n      // Listen for budget change event (fired by Resbuds when User inputs new budgets)\n      container.addEventListener(\n         this.store.constants.BUDGET_CHANGE_EVENT,\n         e => this.handleBudgetChangeEvent(e),\n         false\n      );\n\n      // Generate and append heading for report\n      container.appendChild(this.getHeadingElement());\n\n      // Generate report table\n      let report = this.generateTableElement(\n         `${this.getType().toLowerCase()}-summary-report`\n      );\n\n      // Save report table to this instance for future referencing.\n      // Example: appending new resbuds.\n      this.reportTableElement = report;\n\n      // Add header row to table\n      report.appendChild(this.getHeaderRowForSummary());\n\n      // Build the Total row now so that elements can be passed into resbuds for binding to events\n      let totalRow = this.getFooterRowForSummary();\n\n      // For each Resbud call it's buildSummaryReport method and append the returned\n      // <tr> Element onto the report <table>.\n      this.getResbuds().forEach(resbud =>\n         report.appendChild(resbud.buildSummaryReport(this.name))\n      );\n\n      // Add the totals row to the end of the table\n      report.appendChild(totalRow);\n\n      // Add the built report table to container\n      container.appendChild(report);\n\n      // Add drop-down list for adding a brand-new budget\n      container.appendChild(this.buildAddNewBudgetElement());\n\n      return container;\n   }\n\n   /**\n    * Produces the table housing the results for exporting\n    */\n   buildResultsReport() {\n      // Create the table Element\n      let table = this.generateTableElement(\n         `${this.getType().toLowerCase()}-results-table`\n      );\n\n      // Build out table rows for each Resbud\n      let rows = [];\n      this.getResbuds().forEach(\n         resbud =>\n            (rows = [...rows, ...resbud.buildResultReport(this.getType())])\n      );\n      if (rows.length) {\n         // Append table header row to table\n         table.appendChild(this.buildResultsReportHeader());\n         rows.forEach(row => table.appendChild(row));\n      }\n      return table;\n   }\n\n   getHeadingElement() {\n      return this.store.utils.createElement(\"h2\", {\n         innerHTML: `${this.name}`,\n         className: \"title is-3\"\n      });\n   }\n\n   /**\n    * Handle User input on New Budget input fields.\n    * This handler simply updates the total cells in the footer of the report.\n    *\n    * @param {CustomEvent} e - Custom Event object fired by a Resbud\n    */\n   handleBudgetChangeEvent(e) {\n      this.newBudgetTotalElement.innerHTML = this.calculateNewBudgetTotal();\n      this.amendmentTotalElement.innerHTML = this.calculateAdjustmentTotal();\n   }\n\n   generateTableElement(id = \"\") {\n      return this.store.utils.createElement(\"table\", {\n         className: \"table\",\n         id\n      });\n   }\n\n   buildAddNewBudgetElement() {\n      // Container div\n      let newResbudContainer = this.store.utils.createElement(\"div\", {\n         className: \"addBudgetContainer\"\n      });\n\n      // Add Button\n      let addResbudButton = this.store.utils.createElement(\"button\", {\n         innerHTML: \"Add Budget\",\n         className: \"button is-success\"\n      });\n\n      // Append Select dropdown list\n      newResbudContainer.appendChild(\n         this.buildBudgetDropdownList(`Add new budget to ${this.name}: `)\n      );\n      // Append Add Button\n      newResbudContainer.appendChild(addResbudButton);\n\n      // Add Button Onclick handler\n      addResbudButton.onclick = () => {\n         // Cache <select> element\n         let select = this.newBudgetListElement;\n         // Save selected resbud <option>, converted to upper case\n         let inputValue = select.value.toUpperCase();\n         // Double check valid option selected - overkill really...\n         if (this.store.resbudMap.hasOwnProperty(inputValue)) {\n            // Create a new Resbud instance\n            let newResbud = this.newResbud(inputValue);\n            // Push new Resbud to this Collection\n            this.addResbud(newResbud);\n            // Add Resbud info to the report table - this also sets up new budget input event\n            this.reportTableElement.appendChild(\n               newResbud.buildSummaryReport(this.getType())\n            );\n            // Now remove the selected option from the <select> list; don't want to add it again\n            select.options.remove(select.selectedIndex);\n         }\n         // Reset selected option to first one in list\n         select.selectedIndex = 0;\n      };\n      return newResbudContainer;\n   }\n\n   /**\n    * Builds up the select list for adding a new Resbud\n    *\n    * @param {String} labelValue - Label string/User prompt\n    */\n   buildBudgetDropdownList(labelValue) {\n      // Select Container element\n      let wrapper = this.store.utils.createElement(\"div\", {\n         className: \"select\"\n      });\n      // Select element\n      let select = document.createElement(\"select\");\n      // Save copy of select element to this instance for future use\n      this.newBudgetListElement = select;\n      // Setup select list using filtered list of resbuds\n      let option;\n      for (const resbud in this.getFilteredResbudList()) {\n         option = document.createElement(\"option\");\n         option.value = resbud;\n         option.appendChild(\n            document.createTextNode(this.store.resbudMap[resbud])\n         );\n         this.newBudgetListElement.appendChild(option);\n      }\n      wrapper.appendChild(select);\n      return wrapper;\n   }\n\n   /**\n    * Build Table Footer (Totals) row for Summary Report\n    */\n   getHeaderRowForSummary() {\n      let headingRow = document.createElement(\"thead\");\n      headingRow.appendChild(this.buildHeadingCell(this.store.constants.TYPE));\n      headingRow.appendChild(\n         this.buildHeadingCell(this.store.constants.RESBUD)\n      );\n      headingRow.appendChild(this.buildHeadingCell(\"Resbud (T)\"));\n      headingRow.appendChild(this.buildHeadingCell(\"Base Budget\"));\n      headingRow.appendChild(this.buildHeadingCell(\"Budget\"));\n      headingRow.appendChild(this.buildHeadingCell(\"Amendment\"));\n      return headingRow;\n   }\n\n   /**\n    * Build Table Footer row for Summary Report.\n    * Shows Totals in each column\n    */\n   getFooterRowForSummary() {\n      let row = this.store.utils.createElement(\"tfoot\");\n      row.appendChild(this.store.utils.createElement(\"th\"));\n      row.appendChild(this.store.utils.createElement(\"th\"));\n      row.appendChild(\n         this.store.utils.createElement(\"th\", {\n            innerHTML: \"TOTALS\"\n         })\n      );\n      // Current/Old Budget\n      row.appendChild(\n         this.store.utils.createElement(\"th\", {\n            innerHTML: this.calculateCurrentBudgetTotal()\n         })\n      );\n      // New Budget - save a copy to instance for updating in future\n      this.newBudgetTotalElement = this.store.utils.createElement(\"th\", {\n         innerHTML: this.calculateNewBudgetTotal()\n      });\n      row.appendChild(this.newBudgetTotalElement);\n      // Difference - save a copy to instance for updating in future\n      this.amendmentTotalElement = this.store.utils.createElement(\"th\", {\n         innerHTML: this.calculateAdjustmentTotal()\n      });\n      row.appendChild(this.amendmentTotalElement);\n      return row;\n   }\n\n   calculateCurrentBudgetTotal() {\n      let total = 0;\n      if (this.getType() === this.store.constants.PRICE) {\n         total = this.getResbuds()\n            .map(r => r.getOldBudget())\n            .reduce((acc, curr) => acc + curr, 0);\n      } else {\n         total = this.getResbuds()\n            .map(r => (r.getCode() !== \"XZ90\" ? r.getOldBudget() : 0))\n            .reduce((acc, curr) => acc + curr, 0);\n      }\n      return this.store.utils.roundToTwo(total);\n   }\n\n   calculateNewBudgetTotal() {\n      let total = 0;\n      if (this.getType() === this.store.constants.PRICE) {\n         total = this.getResbuds()\n            .map(r => r.getNewBudget())\n            .reduce((acc, curr) => acc + curr, 0);\n      } else {\n         total = this.getResbuds()\n            .map(r => (r.getCode() !== \"XZ90\" ? r.getNewBudget() : 0))\n            .reduce((acc, curr) => acc + curr, 0);\n      }\n      return this.store.utils.roundToTwo(total);\n   }\n\n   /**\n    * Returns the total of all adjustments for this collection.\n    * There is a lot of rounding being applied here to stop the NaN issue.\n    */\n   calculateAdjustmentTotal() {\n      let total = 0;\n      if (this.getType() === this.store.constants.PRICE) {\n         total = this.getResbuds()\n            .map(r => this.getFormattedAdjustmentTotal(r))\n            .reduce((acc, curr) => acc + curr, 0);\n      } else {\n         total = this.getResbuds()\n            .map(r =>\n               r.getCode() !== \"XZ90\" ? this.getFormattedAdjustmentTotal(r) : 0\n            )\n            .reduce((acc, curr) => acc + curr, 0);\n      }\n      return this.store.utils.roundToTwo(total);\n   }\n\n   // Makes calculateAdjustmentTotal more readable\n   getFormattedAdjustmentTotal(r) {\n      let round = this.store.utils.roundToTwo;\n      return round(r.getNewBudget());\n   }\n\n   /**\n    * Build Table Header row for Results Report\n    */\n   buildResultsReportHeader() {\n      let headingRow = document.createElement(\"thead\");\n      headingRow.appendChild(this.buildHeadingCell(this.store.constants.TYPE));\n      headingRow.appendChild(\n         this.buildHeadingCell(this.store.constants.RESBUD)\n      );\n      headingRow.appendChild(this.buildHeadingCell(\"Resbud (T)\"));\n      headingRow.appendChild(\n         this.buildHeadingCell(this.store.constants.SUB_PROJECT)\n      );\n      headingRow.appendChild(this.buildHeadingCell(\"Amendment\"));\n      headingRow.appendChild(\n         this.buildHeadingCell(this.store.constants.PERIOD)\n      );\n      headingRow.appendChild(\n         this.buildHeadingCell(this.store.constants.DESCRIPTION)\n      );\n      return headingRow;\n   }\n\n   /**\n    * Builds and returns a <th> element\n    *\n    * @param {String} value - Heading string\n    */\n   buildHeadingCell(value) {\n      return this.store.utils.createElement(\"th\", {\n         innerHTML: value\n      });\n   }\n\n   exportData() {\n      let exportData = [];\n      this.getResbuds().forEach(resbud =>\n         exportData.push(resbud.exportData(this.getType()))\n      );\n      return exportData;\n   }\n\n   /**\n    * Returns a map of Resbud Codes to Resbud Names containing only those\n    * that aren't already part of the Resbud List for this Collection\n    */\n   getFilteredResbudList() {\n      let existingCodes = this.getResbuds().map(resbud => resbud.getCode());\n      let filteredList = {};\n\n      for (let code in this.store.resbudMap)\n         if (!existingCodes.includes(code))\n            filteredList[code] = this.store.resbudMap[code];\n\n      return filteredList;\n   }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (DataCollection);\n\n\n//# sourceURL=webpack:///./js/DataCollection.js?");

/***/ }),

/***/ "./js/Resbud.js":
/*!**********************!*\
  !*** ./js/Resbud.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Resbud class by Johnpaul McMahon\n *\n * Each instance of this class represents a budget\n * within a given type (FEC, PRICE, INTERNAL BID FEC etc).\n */\n\nclass Resbud {\n   /**\n    * Constructor\n    *\n    * @param {String} name - resbud code (e.g. XA20)\n    * @param {String} longName - resbud text (e.g. Salaries - Clinical)\n    * @param {Object} store - useful data, constants and utils\n    */\n   constructor(name, longName, store) {\n      // Resbud\n      this.name = name;\n      // Resbud (T)\n      this.longName = longName;\n      // Utility functions\n      this.store = store;\n      // List of current budget amounts\n      this.oldBudget = [];\n      // new budget total\n      this.newBudget = 0;\n      // List of amendment amounts per period\n      this.amendmentData = [];\n      // List of periods relevant for this Resbud\n      this.periods = [];\n      // Save DOM Node so that can update when user changes new budget\n      this.amendmentElement;\n      // Save ref to roundToTwo function for ease of use\n      this.round = store.utils.roundToTwo;\n   }\n\n   /**\n    *\n    * @param {Number} amount amount to push to old budget list\n    * @param {Number|String} period period that amount being pushed relates to\n    */\n   pushToOldBudget(amount, period) {\n      // Push the amount\n      this.oldBudget.push(amount);\n      // Push the period\n      this.pushToPeriods(period);\n      // Default new budget to current budget so update that too.\n      // Disabling this for create_from_exisiting side-project.\n      // this.newBudget += amount;\n   }\n\n   getOldBudget() {\n      return this.oldBudget.reduce((acc, curr) => acc + curr, 0);\n   }\n\n   getNewBudget() {\n      return this.newBudget;\n   }\n\n   getAmendmentTotal() {\n      return this.amendmentData.reduce((acc, curr) => acc + curr, 0);\n   }\n\n   setNewBudgetTotal(total) {\n      this.newBudget = total;\n   }\n\n   /**\n    * Push a period onto the list maintained by this instance.\n    * Each Resbud needs to maintain their own period list as they\n    * aren't all the same.\n    *\n    * @param {Number} period\n    */\n   pushToPeriods(period) {\n      this.periods.push(period);\n   }\n\n   /**\n    * Returns the change in budget.\n    * There is a lot of rounding required in here.\n    * The return value of this function should only be used for display purposes. NOT calculations.\n    *\n    * @return {Number}\n    */\n   getBudgetChange() {\n      let newBudg = this.round(this.getNewBudget());\n      // Forcing old(current) budget to 0 for create_from_existing side-project.\n      let oldBudg = 0; //this.round(this.getOldBudget());\n      return this.round(newBudg + oldBudg);\n   }\n\n   /**\n    * This returns the Resbud code that we're familiar with from Agresso.\n    *\n    * @return {String}\n    */\n   getCode() {\n      return this.name;\n   }\n\n   /**\n    * This returns the Resbud (T) that we're familiar with from Agresso.\n    *\n    * @return {String}\n    */\n   getCodeText() {\n      return this.longName;\n   }\n\n   /**\n    * The most important function of the entire Application!\n    * Doesn't accept any parameters or return any value.\n    * It creates the amendments required for each period of the\n    * Resbud and pushes to amendmentData.\n    * Results are retrieved from amendmentData.\n    */\n   calculateResults() {\n      // Clear out amendment data (means this can be re-used in same session)\n      this.amendmentData = [];\n      let currBudg = this.getOldBudget();\n      let newBudg = this.getNewBudget();\n      \n      // The amendment is simply the new budget as this is for posting to planner for a sub-project\n      // that does not have budgets at the moment.\n      let amendmentTotal = newBudg;\n\n      // Just using the rounded version to check if there is a change.\n      // Hopefully this stops rogue Resbuds appearing in results.\n      if (currBudg === 0) {\n         // Pro-rate; for the time-being\n         let proRatedAmendedAmount = amendmentTotal / this.store.periods.length;\n         for (let i = 0; i < this.store.periods.length; i++) {\n            this.amendmentData.push(proRatedAmendedAmount);\n         }\n         this.periods = [...this.store.periods];\n      } else {\n         // Attribute correct percentage of total amendment amount to each period\n         this.oldBudget.forEach(periodAmount => {\n            this.amendmentData.push((periodAmount / currBudg) * amendmentTotal);\n         });\n      }\n   }\n\n   /**\n    * Returns a list containing all amendment rows required for exporting.\n    * The list returned is 2D. Each nested list contains all the data\n    * required for each period.\n    *\n    * @param {String} type - Version; PBFEC, PBPRICE etc.\n    */\n   exportData(type) {\n      let exportData = [];\n      if (this.getAmendmentTotal() !== 0) {\n         for (let i = 0; i < this.amendmentData.length; i++) {\n            exportData.push([\n               type,\n               this.getCode(),\n               this.getCodeText(),\n               this.store.subProject(),\n               this.amendmentData[i],\n               this.periods[i],\n               this.store.description()\n            ]);\n         }\n      }\n      return exportData;\n   }\n\n   /**\n    * Creates and returns a table row (<tr>) which contains the\n    * summarised info for the Resbud. It also contains an input\n    * to let the User input new budget values.\n    *\n    * @param {String} type - Version; PBFEC, PBPRICE etc.\n    */\n   buildSummaryReport(type) {\n      // Resbud report container (table row)\n      let rowElement = document.createElement(\"tr\");\n\n      // Add type field\n      rowElement.appendChild(this.generateField(type));\n\n      // Add resbud code field\n      rowElement.appendChild(this.generateField(this.name));\n\n      // Add resbud name field\n      rowElement.appendChild(this.generateField(this.longName));\n\n      // Add current/old budget\n      rowElement.appendChild(\n         this.generateField(this.round(this.getOldBudget()))\n      );\n\n      // New Budget Field\n      rowElement.appendChild(this.generateNewBudgetField(type));\n\n      // Add change/amendment required\n      this.amendmentElement = this.generateField(this.getBudgetChange());\n      rowElement.appendChild(this.amendmentElement);\n\n      return rowElement;\n   }\n\n   buildResultReport(type) {\n      let row;\n      let rows = [];\n\n      // Create a table row for each period\n      for (let i = 0; i < this.amendmentData.length; i++) {\n         row = document.createElement(\"tr\");\n         row.appendChild(this.generateField(type));\n         row.appendChild(this.generateField(this.getCode()));\n         row.appendChild(this.generateField(this.getCodeText()));\n         row.appendChild(this.generateField(this.store.subProject));\n         row.appendChild(this.generateField(this.amendmentData[i]));\n         row.appendChild(this.generateField(this.periods[i]));\n         row.appendChild(this.generateField(this.store.description));\n         rows.push(row);\n      }\n\n      return rows;\n   }\n\n   generateNewBudgetField(type) {\n      // Create New Budget Cell\n      let newBudgetCell = this.store.utils.createElement(\"td\", {\n         className: \"newBudgetInput\"\n      });\n\n      // Create New Budget Input Field to attach to cell\n      let newBudgetInput = this.store.utils.createElement(\"input\", {\n         value: this.round(this.getNewBudget()),\n         type: \"text\"\n         // step: '0.01',\n      });\n\n      // Attach input to cell\n      newBudgetCell.appendChild(newBudgetInput);\n\n      // data-binding\n      newBudgetInput.onkeyup = () => {\n         // Reset new budget data so that results can be re-calculated\n         if (this.amendmentData.length > 0) this.amendmentData = [];\n\n         // Simply sets the new budget total amount\n         // TODO: validate input so that it only accepts valid numbers (beware of '-')\n         // The regex inside replace removes all pound symbols and commas as they don't play well with parseFloat\n         this.setNewBudgetTotal(\n            parseFloat(newBudgetInput.value.replace(/[£,]/g, \"\"))\n         );\n\n         // Update Amendment/Difference Element\n         this.amendmentElement.innerHTML = this.getBudgetChange();\n\n         // Fire Event so that subscribers can update DOM elements (or whatever) as required.\n         newBudgetInput.dispatchEvent(\n            new CustomEvent(this.store.constants.BUDGET_CHANGE_EVENT, {\n               detail: {\n                  message: this.getCode() + \": New budget changed\",\n                  code: this.getCode(),\n                  codeText: this.getCodeText()\n               },\n               bubbles: true,\n               cancelable: true\n            })\n         );\n      };\n\n      return newBudgetCell;\n   }\n\n   generateField(value) {\n      return this.store.utils.createElement(\"td\", {\n         innerHTML: value\n      });\n   }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (Resbud);\n\n\n//# sourceURL=webpack:///./js/Resbud.js?");

/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _test_data_basic_test_1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./test_data/basic_test_1 */ \"./js/test_data/basic_test_1.js\");\n/* harmony import */ var _App__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App */ \"./js/App.js\");\n/**\n * Johnpaul McMahon\n * Planner Adjustment helper script\n */\n\n\n\n// Entry point\n(function() {\n   /**\n    * Shared store object.\n    *\n    * Will be controlled by App class which will pass\n    * only what is required from the store to other\n    * objects. This will allow the App class to\n    * control the updating of the store.\n    */\n   const store = {\n      constants: Object.freeze({\n         TYPE: \"Version\",\n         FEC_BUDGET_TYPES: [\"PBFEC\", \"IBFEC\"],\n         PRICE_BUDGET_TYPES: [\"PBPRICE\", \"IBPRICE\"],\n         RESBUD: \"Resbud\",\n         NEW_BUDGET: \"PCB Budget\",\n         GBP_AMOUNT: \"Amount\",\n         CURR_AMOUNT: \"Curr. amount\",\n         SUB_PROJECT: \"Sub-Project\",\n         DESCRIPTION: \"Description\",\n         PERIOD: \"Period\",\n         BUDGET_CHANGE_EVENT: \"newBudgetChanged\"\n      }),\n      htmlHooks: Object.freeze({\n         APP: \"app\",\n         FILE_INPUT: \"dataInput\",\n         NO_FILE: \"noFile\",\n         INITIAL_CONTROLS: \"initialControls\",\n         REPORT: \"report\",\n         RESULT: \"result\",\n         STATUS: \"status\",\n         OUTPUT: \"output\"\n      }),\n      resbudMap: Object.freeze({\n         XI10: \"Animals\",\n         XU10: \"Consumables\",\n         XP10: \"Contingencies\",\n         XU11: \"DA Consumables\",\n         XE11: \"DA Equipment Maintenance\",\n         XE10: \"Equipment\",\n         XF10: \"Equipment Large Capital\",\n         XZ11: \"Estates Costs\",\n         XQ10: \"Exceptional Items\",\n         XZ90: \"Income\",\n         XZ10: \"Indirects\",\n         XS10: \"Market Assessment\",\n         XW10: \"Others\",\n         XJ10: \"Patents\",\n         XA10: \"Salaries - Clinical Academic\",\n         XA19: \"Salary Recoups - Clinical\",\n         XA20: \"Salaries - Research\",\n         XA29: \"Salary Recoups - Research\",\n         XA30: \"Salaries - Technical & Related\",\n         XA39: \"Salary Recoups - Technical & Related\",\n         XA40: \"Salaries - Modernisation of Pay\",\n         XA49: \"Salary Recoups - Modernisation of Pay\",\n         XA50: \"Salaries - Administrative\",\n         XA59: \"Salary Recoups - Administrative\",\n         XA60: \"Salaries - Others\",\n         XA69: \"Salary Recoups - Others\",\n         XK10: \"Sponsored Refurbishment\",\n         XG10: \"Studentships\",\n         XT10: \"Student Matric Fees\",\n         XR10: \"Subcontract Costs\",\n         XZ12: \"Technician Infrastructure Costs\",\n         XN10: \"Travel Overseas\",\n         XM10: \"Travel UK\"\n      }),\n      utils: Object.freeze({\n         createElement: (element, options = {}) => {\n            element = document.createElement(element);\n            Object.keys(options).forEach(option => {\n               element[option] = options[option];\n            });\n            return element;\n         },\n         removeAllChildren: element => {\n            while (element.firstChild) element.removeChild(element.firstChild);\n         },\n         roundToTwo(num) {\n            // see https://stackoverflow.com/a/18358056\n            return +(Math.round(num + \"e+2\") + \"e-2\");\n         }\n      })\n   };\n\n   if (_test_data_basic_test_1__WEBPACK_IMPORTED_MODULE_0__[\"default\"].length) {\n      startProcessing(_test_data_basic_test_1__WEBPACK_IMPORTED_MODULE_0__[\"default\"], store);\n   } else {\n      try {\n         // Setup file select dialog listener.\n         document\n            .getElementById(store.htmlHooks.FILE_INPUT)\n            .addEventListener(\"change\", getFileSelectedHandler(store), false);\n\n         // Setup the drop zone listeners.\n         let dropZone = document.getElementById(\"drop_zone\");\n         // When user drags over drop zone\n         dropZone.addEventListener(\"dragover\", handleDragOver, false);\n         // When user leaves the drop zone\n         dropZone.addEventListener(\n            \"dragleave\",\n            e => e.target.classList.remove(\"hovering\"),\n            false\n         );\n         // When user drops file on the drop zone\n         dropZone.addEventListener(\n            \"drop\",\n            getFileSelectedHandler(store),\n            false\n         );\n      } catch (err) {\n         document.getElementById(\"app\").innerHTML =\n            '<div style=\"color: red\"><h2>ERROR: </h2><h4>' +\n            err +\n            \"</h4></div>\";\n         console.error(err);\n      }\n   }\n})();\n\n/**\n * Called when user is dragging/hovering a file over the\n * drop zone area.\n *\n * @param {DragEvent} e\n */\nfunction handleDragOver(e) {\n   e.stopPropagation();\n   e.preventDefault();\n\n   // Explicitly show this is a copy.\n   e.dataTransfer.dropEffect = \"copy\";\n\n   // Add relevant class to drop zone if user is dragging over it.\n   if (\n      (\" \" + e.target.className + \" \")\n         .replace(/[\\n\\t]/g, \" \")\n         .indexOf(\" hovering \") < 0\n   ) {\n      e.target.classList.add(\"hovering\");\n   }\n}\n\n/**\n |--------------------------------------------------\n | Callback used when user selects/drops an input file.\n | Kick starts the process\n |--------------------------------------------------\n */\n\nfunction getFileSelectedHandler(store) {\n   return e => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      try {\n         let files = e.type === \"drop\" ? e.dataTransfer.files : e.target.files;\n         if (files.length > 0) {\n            if (files[0].name.split(\".\").pop() !== \"csv\")\n               throw \"File must be of CSV format and have .csv extension\";\n            // Use Papa to parse CSV file:\n            Papa.parse(files[0], {\n               complete: (results, file) =>\n                  startProcessing(results.data, store),\n               skipEmptyLines: true,\n               header: true,\n               dynamicTyping: true\n            });\n         } else {\n            throw \"No file chosen. Please refresh and try again...\";\n         }\n      } catch (error) {\n         console.error(error);\n         document.getElementById(\n            \"file-error-status\"\n         ).innerHTML = `<div class=\"notification is-danger\" style=\"margin-bottom: 15px;\">${error}</div>`;\n      }\n   };\n}\n\n/**\n |--------------------------------------------\n | Process input file which contains the \n | current planner budgets that require\n | amending.\n |\n | input is an array of objects. Each \n | object is a record/row in the input file.\n | The column heading is the key for each\n | value within the record.\n |--------------------------------------------\n */\nfunction startProcessing(data, store) {\n   document.getElementById(store.htmlHooks.INITIAL_CONTROLS).style.display =\n      \"none\";\n\n   if (data.length > 0) {\n      try {\n         // filter out summary/blank rows\n         data = data.filter(row => row[store.constants.PERIOD] != false);\n\n         // Check for empty input which would mean no budgets in planner\n         if (data.length === 0)\n            throw \"No budgets. Use RSO - 'RESBUD Costs per Period' enquiry\";\n\n         // Instantiate new App instance\n         let app = new _App__WEBPACK_IMPORTED_MODULE_1__[\"default\"](store);\n\n         // Initialise App with the parsed data\n         app.init(data);\n\n         /**\n          * Renders initial report for user to input new budgets\n          * This also sets up the event for the user to\n          * confirm new budgets and process results.\n          */\n         app.buildSummaryReport();\n      } catch (err) {\n         document.getElementById(store.htmlHooks.APP).innerHTML =\n            '<div style=\"color: red\"><h2>ERROR: </h2><h4>' +\n            err +\n            \"</h4></div>\";\n\n         console.error(err);\n      }\n   }\n}\n\n\n//# sourceURL=webpack:///./js/main.js?");

/***/ }),

/***/ "./js/test_data/basic_test_1.js":
/*!**************************************!*\
  !*** ./js/test_data/basic_test_1.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nconst TEST_MODE = false;\nlet TEST_DATA = [];\nif (TEST_MODE)\n   TEST_DATA = [\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 0,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 500,\n         \"Curr. amount\": 0,\n         \"PCB Budget\": 0,\n         Amendment: \"\",\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 0,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 500,\n         \"Curr. amount\": 0,\n         \"PCB Budget\": 0,\n         Amendment: \"\",\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201807,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 500,\n         \"Curr. amount\": 500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"12.3762%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201808,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 500,\n         \"Curr. amount\": 500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"12.3762%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201809,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 750,\n         \"Curr. amount\": 750,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"18.5644%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201810,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 790,\n         \"Curr. amount\": 790,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"19.5545%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201811,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201812,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201901,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201902,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201903,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201904,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201905,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1500,\n         \"Curr. amount\": 1500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201906,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 1960,\n         \"Curr. amount\": 1960,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"37.1287%\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XG10\",\n         \"Resbud(T)\": \"Studentships\",\n         \"Sub-Project\": \"302906-01\",\n         Period: \"\",\n         Description: \"\",\n         Amount: 15000,\n         \"Curr. amount\": 15000,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 0,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 0,\n         \"Curr. amount\": 0,\n         \"PCB Budget\": \"\",\n         Amendment: \"\",\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201807,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201808,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201809,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201810,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201811,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201812,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201901,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201902,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201903,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201904,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201905,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201906,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: -2500,\n         \"Curr. amount\": -2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBFEC\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: \"\",\n         Description: \"\",\n         Amount: -30000,\n         \"Curr. amount\": -30000,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201807,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201808,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201809,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201810,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201811,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201812,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201901,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201902,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201903,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201904,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201905,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: 201906,\n         Description:\n            \"Project: 302906 Proposed Start: 01/02/2018 - Proposed End: 31/07/2021\",\n         Amount: 2500,\n         \"Curr. amount\": 2500,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      },\n      {\n         Version: \"PBPRICE\",\n         Resbud: \"XZ90\",\n         \"Resbud(T)\": \"Income\",\n         \"Sub-Project\": \"302906-01\",\n         Period: \"\",\n         Description: \"\",\n         Amount: 30000,\n         \"Curr. amount\": 3000,\n         \"PCB Budget\": 0,\n         Amendment: 0,\n         \"\": \"\"\n      }\n   ];\n/* harmony default export */ __webpack_exports__[\"default\"] = (TEST_DATA);\n\n\n//# sourceURL=webpack:///./js/test_data/basic_test_1.js?");

/***/ })

/******/ });